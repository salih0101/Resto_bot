# from aiogram import Dispatcher, executor, Bot
# from aiogram.dispatcher import FSMContext
#
# from states import Registration, GetProduct, Cart, Order
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# import buttons as btns
# import database
# import states
# import os
# from dotenv import load_dotenv, find_dotenv
# import logging
# from datetime import datetime
# import config
# from aiogram import types
#
#
#
# load_dotenv(find_dotenv())
#
# bot = Bot(config.BOT_TOKEN)
#
# logging.basicConfig(filename='spam.log', level=logging.INFO)
#
#
# dp = Dispatcher(bot, storage=MemoryStorage())
#
# about = ('–ú—ã - —É–∑–±–µ–∫—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2011 –≥–æ–¥—É –≤ –¢–∞—à–∫–µ–Ω—Ç–µ. '
#          '–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–µ–∂–¥—É –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. '
#          '–ù–∞—à —É—Å–ø–µ—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ª—é–±–æ–≤—å—é –∫ –ø–æ–≤–∞—Ä—Å–∫–æ–º—É –∏—Å–∫—É—Å—Å—Ç–≤—É. '
#          '–ü–æ–≤–∞—Ä –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—é–¥–µ–π –∏ —Å–æ–∑–¥–∞–µ—Ç —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã —Å—á–∞—Å—Ç—å—è. '
#          '–ú—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–≤–∞—Ä - —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞ –ó–µ–º–ª–µ.')
#
#
# @dp.message_handler(commands=['start'])
# async def start_message(message):
#     # ---–ü–æ–ª—É—á–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     user_id = message.from_user.id
#     # ---–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
#     checker = database.check_user(user_id)
#     if checker:
#         await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–µ \n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ',
#                              reply_markup=btns.main_menu())
#     else:
#         await message.answer(
#             '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ò–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',
#             reply_markup=btns.ReplyKeyboardMarkup())
#         await Registration.getting_name_state.set()
#
#
# @dp.message_handler(state=Registration.getting_name_state)
# async def get_name(message, state=Registration.getting_name_state):
#     user_answer = message.text
#
#     await state.update_data(name=user_answer)
#     await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n', reply_markup=btns.phone_number_kb())
#
#     await Registration.getting_phone_number.set()
#
#
# # @dp.message_handler(state=Registration.getting_phone_number, content_types=['contact'])
# # async def get_number(message, state=Registration.getting_phone_number):
# #     user_answer = message.contact.phone_number
# #
# #     await state.update_data(number=user_answer)
# #     await message.answer('–ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ªüë´', reply_markup=btns.gender_kb())
# #
# #     await Registration.getting_gender.set()
#
#
#
# @dp.message_handler(state=Registration.getting_phone_number, content_types=['text', 'contact'])
# async def get_number(message: types.Message, state: FSMContext):
#     global user_answer
#
#     if message.content_type == 'text':
#         user_answer = message.text
#
#         if not user_answer.replace('+', '').isdigit():
#             await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
#             return
#
#     elif message.content_type == 'contact':
#         user_answer = message.contact.phone_number
#
#     await state.update_data(number=user_answer)
#
#     await message.answer('–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ωüìù!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
#
#     all_info = await state.get_data()
#     name = all_info.get('name')
#     phone_number = all_info.get('number')
#     latitude = all_info.get('latitude')
#     longitude = all_info.get('longitude')
#     gender = user_answer
#     user_id = message.from_user.id
#     database.add_user(user_id, name, phone_number, latitude, longitude, gender)
#
#     await state.finish()
#
#
#
# @dp.message_handler(state=GetProduct.getting_pr_name, content_types=['text'])
# async def choose_count(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#     user_data = await dp.current_state(user=user_id).get_data()
#     category_id = user_data.get('category_id')
#
#     actual_products = [i[0] for i in database.get_name_product(category_id)]
#
#
#     if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
#
#         await dp.current_state(user=user_id).finish()
#
#     elif user_answer in actual_products:
#
#         product_info = database.get_all_info_product(user_answer)
#         await bot.send_photo(user_id, photo=product_info[4],
#                              caption=f'{product_info[0]}\n\n–¶–µ–Ω–∞: {product_info[2]} $\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[3]}\n\n@testname_bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£',
#                              reply_markup=btns.product_count())
#
#         await dp.current_state(user=user_id).update_data(user_product=message.text, price=product_info[2])
#
#         await states.GetProduct.getting_pr_count.set()
#
#
# @dp.message_handler(state=GetProduct.getting_pr_count)
# async def text_message3(message, state=GetProduct.getting_pr_count):
#     product_count = message.text
#     user_data = await state.get_data()
#     user_product = user_data.get('user_product')
#     category_id = user_data.get('category_id')
#     pr_price = float(user_data.get('price'))
#
#
#     if product_count.isnumeric():
#         database.add_pr_to_cart(message.from_user.id, user_product, pr_price, int(product_count))
#         # database.add_pr_to_cart2(message.from_user.id, user_product, pr_price, int(product_count))
#
#         await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.catalog_folder())
#         await state.finish()
#
#     # elif message.text != '–ù–∞–∑–∞–¥‚óÄÔ∏è':
#     #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏üîΩ', reply_markup=btns.product_count())
#
#     else:
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞üîΩ', reply_markup=btns.count_kb(category_id))
#         await states.GetProduct.getting_pr_name.set()
#
#
#
# @dp.message_handler(state=Cart.waiting_for_product)
# async def cart_function(message, state=Cart.waiting_for_product):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#     if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
#         await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
#         await dp.current_state(user=message.from_user.id).finish()
#
#
#     elif user_answer == '–û—á–∏—Å—Ç–∏—Ç—åüÜë':
#         # ---–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –±–∞–∑—ã(–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
#         database.delete_from_cart(user_id)
#         await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖ\n\n‚ùóÔ∏è‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥‚ùóÔ∏è‚ùóÔ∏è')
#
#
#     if user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ':
#
#         user_cart = database.get_user_cart(message.from_user.id)
#
#         if user_cart:
#
#             result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
#             admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
#             total_price = 0
#
#             for i in user_cart:
#                 result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
#                 admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
#                 total_price += i[3]
#
#             result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
#         await message.answer('–†–∞–∑–¥–µ–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞üîΩ', reply_markup=btns.confirmation_kb())
#
#     elif user_answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
#         order_id = datetime.now().microsecond
#         user_cart = database.get_user_cart(message.from_user.id)
#
#         if user_cart:
#
#             result_answer = f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} :\n\n'
#             admin_message = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id} ‚úÖ‚úÖ:\n\n'
#             total_price = 0
#
#             for i in user_cart:
#                 result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
#                 admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
#                 total_price += i[3]
#
#             result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
#             admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
#             # ---–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#             await message.answer(result_answer, reply_markup=btns.main_menu())
#             await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
#             await state.finish()
#
#             await bot.send_message(5928000362, admin_message)
#
#             database.delete_from_cart(user_id)
#
#
#
# # ---–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
# @dp.message_handler(content_types=['text'])
# async def main_menu(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#
#     if user_answer == 'üõí–ö–æ—Ä–∑–∏–Ω–∞':
#
#         user_cart = database.get_user_cart(message.from_user.id)
#
#         if user_cart:
#
#             result_answer = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞üõí:\n\n'
#             total_price = 0
#
#             for i in user_cart:
#                 result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
#                 total_price += i[3]
#
#             result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
#             await message.answer(result_answer, reply_markup=btns.cart_kb())
#             await Cart.waiting_for_product.set()
#
#         else:
#             await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüõí\n\n'
#                                  '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùóÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚ùóÔ∏è')
#
#
#     if user_answer == 'üì¶–ö–∞—Ç–∞–ª–æ–≥':
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
#
#     elif user_answer == '–ù–∞–∑–∞–¥üîô':
#         await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
#
#     elif user_answer == '–ö–∏—Ç–µ–ª–∏ –º—É–∂—Å–∫–∏–µ':
#         await dp.current_state(user=user_id).update_data(category_id=11)
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.spray_kb())
#         await states.GetProduct.getting_pr_name.set()
#
#     elif user_answer == '–ö–∏—Ç–µ–ª–∏ –∂–µ–Ω—Å–∫–∏–µ':
#         await dp.current_state(user=user_id).update_data(category_id=22)
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.tablets_kb())
#         await states.GetProduct.getting_pr_name.set()
#
#     elif user_answer == '–°–∞–ª—Ñ–µ—Ç–∫–∏':
#         await dp.current_state(user=user_id).update_data(category_id=33)
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.syrup_kb())
#         await states.GetProduct.getting_pr_name.set()
#
#     elif user_answer == '–§–∞—Ä—Ç—É–∫–∏':
#         await dp.current_state(user=user_id).update_data(category_id=44)
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.pastes_kb())
#         await states.GetProduct.getting_pr_name.set()
#
#     # elif user_answer == '–ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã':
#     #     await dp.current_state(user=user_id).update_data(category_id=55)
#     #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.other_pr_kb())
#     #     await states.GetProduct.getting_pr_name.set()
#
#
#     # elif user_answer == '–ü–æ–ª–æ, —Ñ—É—Ç–±–æ–ª–∫–∏':
#     #     await dp.current_state(user=user_id).update_data(category_id=66)
#     #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.polo_kb())
#     #     await states.GetProduct.getting_pr_name.set()
#
#
#     elif user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
#
#     elif user_answer == '–û –Ω–∞—Å':
#         await message.answer(about)
#
#     elif user_answer == '‚òéÔ∏è–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
#         await message.answer(f'üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:'
#                              f'+9989*******\n'
#                              f'+9989*******\n'
#                              f'üìß E-mail: test@gmail.com\n'
#                              f'üåê Instagram: testgram\n'
#                              f'üìç –ù–∞—à –∞–¥—Ä–µ—Å: –≥. –¢–∞—à–∫–µ–Ω—Ç, –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω\n'
#                              f'‚úâÔ∏è –ù–ê–ú –í–ê–ñ–ù–û –ó–ù–ê–¢–¨\n'
#                              f'–•–æ—Ç–∏–º —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ –Ω–∞—Å!\n'
#                              f'–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–º!\n'
#                              f'Telegram: @usernametest')
#
#     elif user_answer == 'üìÑ–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤':
#
#         user_cart = database.get_user_cart(message.from_user.id)
#
#         if user_cart:
#
#             result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖ:\n\n'
#             admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
#             total_price = 0
#
#             for i in user_cart:
#                 result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n\n'
#                 admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
#                 total_price += i[3]
#
#             result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
#             admin_message += f' –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
#
#             await message.answer(result_answer, reply_markup=btns.order_kb())
#
#             await Order.waiting_accept.set()
#
#         else:
#             await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüõí\n\n'
#                                  '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùóÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚ùóÔ∏è')
#
#     logging.info(message.text)
# @dp.message_handler(state=Order.waiting_accept)
# async def accept_order(message):
#     user_answer = message.text
#     user_id = message.from_user.id
#
#     if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
#         await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ActiveBee‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
#         await dp.current_state(user=message.from_user.id).finish()
#
#     elif user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
#
#         user_cart = database.get_user_cart(message.from_user.id)
#
#         if user_cart:
#
#             result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
#             admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
#             total_price = 0
#
#             for i in user_cart:
#                 result_answer += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n–ò—Ç–æ–≥: {total_price:.2f}$'
#                 admin_message += f'- {i[1]}: {i[-1]} —à—Ç = {i[3]:.2f}$\n'
#                 total_price += i[3]
#
#             result_answer += f' \n–ò—Ç–æ–≥: {total_price:.2f}$'
#             admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:.2f}$'
#
#             await message.answer(result_answer, reply_markup=btns.main_menu())
#             await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
#             await bot.send_message(5928000362, admin_message)
#             await dp.current_state(user=message.from_user.id).finish()
#             database.delete_from_cart(user_id)
#
#
# executor.start_polling(dp, skip_updates=True)