from settings import *
from about_company import about, contacts
import csv
from aiogram import types


load_dotenv(find_dotenv())
bot = Bot(config.BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'], state='*')
async def start_message(message):

    start_txt = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name} \n' \
                f'–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å—Ç–∏–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π , ' \
                f'–∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.'

    start_reg = f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: '

    user_id = message.from_user.id
    checker = database.check_user(user_id)

    if user_id == 5928000362:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                             reply_markup=btns.admin_kb())
        await states.Admin.get_status.set()

    elif checker:
        await message.answer(start_txt, reply_markup=btns.main_menu())

    else:
        await message.answer(start_txt)
        await message.answer(start_reg,
                             reply_markup=btns.ReplyKeyboardMarkup())

        await states.Registration.getting_name_state.set()


@dp.message_handler(commands=['show_users'])
async def show_users(message: types.Message):
    admin_id = 5928000362

    if message.from_user.id != admin_id:
        response = "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await message.answer(response)
        return

    users = database.get_users()

    if users:

        with open('users.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Username", "Phone_number"])

            for user in users:
                writer.writerow([user[0], user[1], user[2]])

        with open('users.csv', 'rb') as file:
            await message.bot.send_document(admin_id, file)

        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª–µ users.csv –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    else:
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    await message.answer(response)


@dp.message_handler(commands=['broadcast'], state=states.Broadcast.broadcast_message)
async def broadcast_command(message, state=states.Broadcast.broadcast_message):

    conn = sqlite3.connect('restodata.db')
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users")
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        await bot.send_message(chat_id=user_id, text=message.text[11:])
        # Replace message.text[11:] with command_args[1] if you prefer using split

    await message.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.')
    await state.finish()


@dp.message_handler(state=states.Admin.get_status)
async def get_name(message, state=states.Admin.get_status):

    if message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
        await states.Add_product.get_name.set()

    elif message.text == 'broadcast':
        await message.answer('test')
        await states.Broadcast.broadcast_message.set()

    elif message.text == '–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞':
        user_id = message.from_user.id
        checker = database.check_user(user_id)

        if checker:
            await state.finish()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç',
                                 reply_markup=btns.main_menu())

        else:
            start_txt = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å \n' \
                        f'–ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å—Ç–∏–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–∏–ª—å–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π, \n' \
                        f'–∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç –≤–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.\n'

            start_reg = f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: '

            await message.answer(start_txt)
            await message.answer(start_reg)

            await states.Registration.getting_name_state.set()


@dp.message_handler(state=states.Add_product.get_name)
async def product_name(message, state=states.Add_product.get_name):
    name = message.text

    await state.update_data(name=name)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ {name}:>>')
    await states.Add_product.get_id.set()


@dp.message_handler(state=states.Add_product.get_id)
async def get_id(message, state=states.Add_product.get_id):
    name = message.text

    await state.update_data(id=name)
    await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    await states.Add_product.get_price.set()


@dp.message_handler(state=states.Add_product.get_price)
async def product_price(message, state=states.Add_product.get_price):
    price = message.text

    await state.update_data(price=price)
    await message.answer(
        f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:>>\n\n'
        f'–ú–æ–¥–µ–ª—å \n' 
        f'–¶–µ–Ω–∞: \n'
        f'–¶–≤–µ—Ç: \n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: \n')

    await states.Add_product.get_info.set()


@dp.message_handler(state=states.Add_product.get_info)
async def product_info1(message, state=states.Add_product.get_info):
    info_pr = message.text

    await state.update_data(description=info_pr)
    await message.answer('–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞>>')
    await states.Add_product.get_photo.set()


@dp.message_handler(content_types=['photo'], state=states.Add_product.get_photo)
async def product_photo(message, state=states.Add_product.get_photo):

    all_info = await state.get_data()
    name = all_info.get('name')
    prd_id = all_info.get('id')
    price = all_info.get('price')
    description = all_info.get('description')
    photo_id = all_info.get('picture')
    nt = all_info.get('notes')
    picture = message.photo[-1].file_id
    await state.update_data(photo=photo_id)

    database.add_products_to_db(name, prd_id, price, description, picture, nt)

    await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=btns.admin_kb())
    await states.Admin.get_status.set()


@dp.message_handler(state=Registration.getting_name_state)
async def get_name(message, state=Registration.getting_name_state):
    user_answer = message.text

    await state.update_data(name=user_answer)
    await message.answer('–ò–º—è —Å–æ—Ö—Ä–∞–Ω–∏–ª!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\n', reply_markup=btns.phone_number_kb())

    await Registration.getting_phone_number.set()


@dp.message_handler(state=Registration.getting_phone_number, content_types=['text', 'contact'])
async def get_number(message: types.Message, state: FSMContext):
    global user_answer

    if message.content_type == 'text':
        user_answer = message.text

        if not user_answer.replace('+', '').isdigit():
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            return

    elif message.content_type == 'contact':
        user_answer = message.contact.phone_number

    await state.update_data(number=user_answer)
    await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, '
                         f'—É–∫–∞–∑—ã–≤–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞\n\n. '
                         f'–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –Ω–∞—à–∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã, –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–∏–ª–µ–º, '
                         f'–∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω–µ—Ç –≤–∞—à —Å—Ç–∏–ª—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.', reply_markup=btns.main_menu())

    all_info = await state.get_data()
    name = all_info.get('name')
    phone_number = all_info.get('number')
    latitude = all_info.get('latitude')
    longitude = all_info.get('longitude')
    gender = user_answer
    user_id = message.from_user.id
    database.add_user(user_id, name, phone_number, latitude, longitude, gender)

    await state.finish()


@dp.message_handler(state=GetProduct.getting_pr_name, content_types=['text'])
async def choose_count(message):
    user_answer = message.text
    user_id = message.from_user.id

    user_data = await dp.current_state(user=user_id).get_data()
    category_id = user_data.get('category_id')

    actual_products = [i[0] for i in database.get_name_product(category_id)]

    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
        await dp.current_state(user=user_id).finish()
        
        await dp.current_state(user=user_id).finish()

    elif user_answer in actual_products:

        product_info = database.get_all_info_product(user_answer)
        await bot.send_photo(user_id, photo=product_info[4],
                             caption=f'{product_info[0]}\n\n–¶–µ–Ω–∞: {product_info[2]} —Å—É–º\n\n'
                                     f'–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[3]}\n\n'
                                     f'@ferrafastudio_bot\n\n',
                             reply_markup=btns.colour_kb())
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç')

        await dp.current_state(user=user_id).update_data(user_product=message.text, price=product_info[2])

        await states.GetProduct.getting_pr_colour.set()


@dp.message_handler(state=GetProduct.getting_pr_colour)
async def choose_colour(message, state=GetProduct.getting_pr_colour):
    user_answer = message.text
    colour = message.text

    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
        await dp.current_state(user=message.from_user.id).finish()

    elif user_answer == '‚ö´Ô∏è–ß–µ—Ä–Ω—ã–π' or user_answer == '‚ö™Ô∏è–ë–µ–ª—ã–π':
        await state.update_data(colour=colour)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=btns.product_count())
        await state.set_state(states.GetProduct.getting_pr_count)


@dp.message_handler(state=GetProduct.getting_pr_count)
async def text_message3(message, state=GetProduct.getting_pr_count):
    product_count = message.text
    user_data = await state.get_data()
    user_product = user_data.get('user_product')
    category_id = user_data.get('category_id')
    pr_price = float(user_data.get('price'))
    colour = user_data.get('colour')

    if product_count.isnumeric():
        database.add_pr_to_cart2(message.from_user.id, user_product, pr_price, int(product_count), colour)

        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É‚úÖ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.catalog_folder())
        await state.finish()

    # elif message.text != '–ù–∞–∑–∞–¥‚óÄÔ∏è':
    #     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏üîΩ', reply_markup=btns.product_count())

    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞üîΩ', reply_markup=btns.count_kb(category_id))
        await states.GetProduct.getting_pr_name.set()


@dp.message_handler(state=Cart.waiting_for_product)
async def cart_function(message, state=Cart.waiting_for_product):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
        await dp.current_state(user=message.from_user.id).finish()

    elif user_answer == '–û—á–∏—Å—Ç–∏—Ç—åüÜë':

        database.delete_from_cart(user_id)
        await message.answer('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞‚úÖ\n\n‚ùóÔ∏è‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥‚ùóÔ∏è‚ùóÔ∏è')

    if user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ':

        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:}—Å—É–º'
        await message.answer('–†–∞–∑–¥–µ–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞üîΩ', reply_markup=btns.confirmation_kb())

    elif user_answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':

        order_id = datetime.now().microsecond
        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ {order_id} :\n\n'
            admin_message = f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ {order_id}:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:}—Å—É–º\n\n'
            admin_message += f' –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:}—Å—É–º\n\n'

            delivery_date = datetime.now() + timedelta(days=21)
            delivery_date1 = datetime.now() + timedelta(days=7)

            result_answer += f'‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–§–∞—Ä—Ç—É–∫): {delivery_date.strftime("%d.%m.%Y")}\n\n'
            result_answer += f'‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–°–∞–ª—Ñ–µ—Ç–∫–∏): {delivery_date1.strftime("%d.%m.%Y")}\n\n'

            admin_message += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–§–∞—Ä—Ç—É–∫): {delivery_date.strftime("%d.%m.%Y")}\n\n'
            admin_message += f'–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏(–°–∞–ª—Ñ–µ—Ç–∫–∏): {delivery_date1.strftime("%d.%m.%Y")}\n\n'

            await message.answer(result_answer, reply_markup=btns.main_menu())
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await state.finish()
            await bot.send_message(5928000362, admin_message)

            database.delete_from_cart(user_id)


@dp.message_handler(content_types=['text'])
async def main_menu(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == 'üõí–ö–æ—Ä–∑–∏–Ω–∞':

        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞üõí:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price}'
            await message.answer(result_answer, reply_markup=btns.cart_kb())
            await Cart.waiting_for_product.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüõí\n\n'
                                 '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùóÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚ùóÔ∏è')


    if user_answer == 'üì¶–ö–∞—Ç–∞–ª–æ–≥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())

    elif user_answer == '–ù–∞–∑–∞–¥üîô':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
        await dp.current_state(user=user_id).finish()
        
    elif user_answer == '–ù–∞–∑–∞–¥':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.catalog_folder())
        await dp.current_state(user=user_id).finish()
        
    elif user_answer == '–°–∞–ª—Ñ–µ—Ç–∫–∏':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.salfetki_kb())

    elif user_answer == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1':
        await dp.current_state(user=user_id).update_data(category_id=11)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.spray_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2':
        await dp.current_state(user=user_id).update_data(category_id=22)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.tablets_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '':
        await dp.current_state(user=user_id).update_data(category_id=33)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.syrup_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–§–∞—Ä—Ç—É–∫–∏':
        await dp.current_state(user=user_id).update_data(category_id=44)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—ÇüîΩ', reply_markup=btns.pastes_kb())
        await states.GetProduct.getting_pr_name.set()

    elif user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—éüîΩ', reply_markup=btns.catalog_folder())
        await dp.current_state(user=user_id).finish()
        
    elif user_answer == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=btns.change_data_kb())
        await states.Settings.set_setting.set()

    elif user_answer == '–û –Ω–∞—Å':
        await message.answer(about)

    elif user_answer == '‚òéÔ∏è–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        await message.answer(contacts)

    elif user_answer == 'üìÑ–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤':

        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:}—Å—É–º'
            admin_message += f' –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:}—Å—É–º'

            await message.answer(result_answer, reply_markup=btns.order_kb())

            await Order.waiting_accept.set()

        else:
            await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—èüõí\n\n'
                                 '–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùóÔ∏è–ö–∞—Ç–∞–ª–æ–≥‚ùóÔ∏è')

    logging.info(message.text)


@dp.message_handler(state=Order.waiting_accept)
async def accept_order(message):
    user_answer = message.text
    user_id = message.from_user.id

    if user_answer == '–ù–∞–∑–∞–¥‚óÄÔ∏è':
        await message.answer('‚ùóÔ∏è–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ActiveBee‚ùóÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ªüîΩ', reply_markup=btns.main_menu())
        await dp.current_state(user=message.from_user.id).finish()

    elif user_answer == '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':

        user_cart = database.get_user_cart(message.from_user.id)

        if user_cart:

            result_answer = '–í–∞—à –∑–∞–∫–∞–∑‚úÖüîΩ:\n\n'
            admin_message = '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑‚úÖ‚úÖ:\n\n'
            total_price = 0

            for i in user_cart:
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                result_answer += f'- {i[1]}: {i[5]} {i[-2]} —à—Ç = {i[3]}—Å—É–º\n\n'
                total_price += i[3]

            result_answer += f' \n–ò—Ç–æ–≥: {total_price:}—Å—É–º'
            admin_message += f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {i[2]}\n\n–ò—Ç–æ–≥: {total_price:}—Å—É–º'

            await message.answer(result_answer, reply_markup=btns.main_menu())
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ\n\n')
            await bot.send_message(5928000362, admin_message)
            await dp.current_state(user=message.from_user.id).finish()
            database.delete_from_cart(user_id)





@dp.message_handler(state=Settings.set_setting, content_types=['text'])
async def set_name(message):
    user_answer = message.text
    user_id = message.from_user.id
    try:
        match user_answer:
            case '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è')
                await Settings.set_name.set()

            case '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä':
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä')
                await Settings.set_number.set()

    except Exception as e:
        print(e)
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')

    try:
        match user_answer:
            case '–ù–ê–ó–ê–î':
                await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=btns.main_menu())
                await dp.current_state(user=user_id).finish()
            
    except Exception as e:
        print(e)
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥')


@dp.message_handler(state=states.Settings.set_name)
async def change_name_db(message, state=Settings.set_name):
    user_answer = message.text

    await state.update_data(name=user_answer)

    ch_name = await state.get_data()
    user_id = message.from_user.id
    database.change_name(user_id, ch_name)
    await state.finish()
    await message.answer('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"', reply_markup=btns.main_menu())


@dp.message_handler(state=Settings.set_number)
async def change_number_db(message, state=Settings.set_number):
    user_answer = message.text

    await state.update_data(phone_number=user_answer)

    ch_number = await state.get_data()
    user_id = message.from_user.id
    database.change_number(user_id, ch_number)
    await state.finish()
    await message.answer('–ù–æ–º–µ—Ä –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=btns.main_menu())





if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)

